const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  // const fs = require("node:fs");
  // const mime = require("mime-types");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-1.5-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 64,
    maxOutputTokens: 65536,
    responseModalities: [
    ],
    responseMimeType: "application/json",
  };
  

    export const GenerateCourseLayout_AI = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate a Course Tutorial on Following Details with field as course Name , Description, along with chapter name , about: Category:'Programming', Topic:'Python', Level:'begineer', NoOfChapters\"5 in JSON format"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "Here's a thinking process that could lead to the JSON course structure:\n\n1.  **Understand the Request:** The user wants a JSON structure representing a beginner Python programming course. Key requirements are:\n    *   JSON format.\n    *   Fields: `courseName`, `description`.\n    *   Nested structure for `chapters`.\n    *   Each chapter needs a `chapterName` and `about` (description).\n    *   Specific details: Category 'Programming', Topic 'Python', Level 'Beginner', Number of Chapters '5'.\n\n2.  **Identify the Main JSON Structure:** The top level needs to be a JSON object `{}`. This object will contain the main course details and the list of chapters.\n\n3.  **Define Top-Level Fields:** Based on the request, the top-level fields are:\n    *   `courseName`: A descriptive name for the course. Something like \"Introduction to Python Programming\" or \"Python for Beginners\". Let's go with \"Python for Absolute Beginners\".\n    *   `description`: A short explanation of what the course covers and who it's for. It should mention the target audience (beginners) and the goal (learning fundamental Python concepts).\n    *   `category`: Directly from the request: \"Programming\".\n    *   `topic`: Directly from the request: \"Python\".\n    *   `level`: Directly from the request: \"Beginner\".\n    *   `numberOfChapters`: Directly from the request: 5. (Though the structure will implicitly show 5 chapters, including this field explicitly matches the request).\n    *   `chapters`: This will be an array `[]` containing the chapter objects.\n\n4.  **Plan the Chapters (Content Strategy):** Since it's a 5-chapter beginner course, the content needs a logical progression.\n    *   **Chapter 1: Introduction:** Start with the absolute basics. What is Python? Why learn it? How to set it up? First simple program (\"Hello, World!\").\n    *   **Chapter 2: Core Data Types & Variables:** Introduce fundamental building blocks: numbers, strings, booleans. How to store data using variables. Basic operations.\n    *   **Chapter 3: Basic Data Structures:** Move to collections of data. Lists are essential for beginners. Maybe touch on tuples briefly. How to access and manipulate items.\n    *   **Chapter 4: Control Flow:** How to make decisions (if/elif/else) and repeat actions (for/while loops). This is crucial for writing non-trivial programs.\n    *   **Chapter 5: Functions:** Introduce modularity. How to define and call functions. Basic concepts like parameters and return values. Why functions are important.\n\n5.  **Define the Chapter Structure:** Each element within the `chapters` array will be a JSON object `{}`. Based on the request, each chapter object needs:\n    *   `chapterNumber`: Although not explicitly requested, adding a number helps maintain order and clarity (e.g., 1, 2, 3, 4, 5).\n    *   `chapterName`: A concise title for the chapter based on the content planned in step 4.\n    *   `about`: A short description of what the student will learn in that specific chapter.\n\n6.  **Flesh out Each Chapter Object:** Now, combine steps 4 and 5.\n\n    *   **Chapter 1:**\n        *   `chapterNumber`: 1\n        *   `chapterName`: \"Getting Started with Python\"\n        *   `about`: \"Introduction to Python, setting up the environment (installation, IDEs/editors), and writing your very first 'Hello, World!' program.\"\n    *   **Chapter 2:**\n        *   `chapterNumber`: 2\n        *   `chapterName`: \"Variables and Basic Data Types\"\n        *   `about`: \"Learn about fundamental data types like integers, floats, strings, and booleans. Understand how to store data using variables and perform basic operations.\"\n    *   **Chapter 3:**\n        *   `chapterNumber`: 3\n        *   `chapterName`: \"Introduction to Lists\"\n        *   `about`: \"Explore your first data structure: lists. Learn how to create lists, access elements, add/remove items, and perform common list operations.\"\n    *   **Chapter 4:**\n        *   `chapterNumber`: 4\n        *   `chapterName`: \"Control Flow: Making Decisions and Repeating Code\"\n        *   `about`: \"Understand how to control the flow of your program using conditional statements (if, elif, else) and loops (for, while).\"\n    *   **Chapter 5:**\n        *   `chapterNumber`: 5\n        *   `chapterName`: \"Introduction to Functions\"\n        *   `about`: \"Learn how to write reusable blocks of code using functions. Understand defining functions, calling functions, parameters, and return values.\"\n\n7.  **Assemble the Final JSON:** Combine the top-level fields and the array of chapter objects into a single JSON structure. Ensure correct syntax (curly braces for objects, square brackets for arrays, commas between elements, quotes around keys and string values).\n\n8.  **Review and Validate:** Read through the generated JSON.\n    *   Is it valid JSON? (Check commas, brackets, braces, quotes).\n    *   Does it meet all the user's requirements? (Fields, category, topic, level, number of chapters, nested structure).\n    *   Is the content logical for a beginner Python course?\n    *   Are the descriptions clear and concise?\n\n    *Self-Correction during review*: Initially, I might have forgotten the `numberOfChapters` field requested explicitly, so I'd add it in. Or maybe the chapter descriptions were too vague, so I'd refine them. I also decided to add `chapterNumber` for better structure, even though it wasn't strictly required by the prompt. I'll ensure the number of chapters in the array matches the `numberOfChapters` field.\n\nThis systematic process ensures all requirements are met, the structure is correct, and the content is logical and appropriate for the specified level."},
            {text: "```json\n{\n  \"courseName\": \"Python for Absolute Beginners\",\n  \"description\": \"Start your programming journey with Python! This course covers the fundamental concepts of Python programming, requiring no prior coding experience. Learn syntax, data types, control flow, and basic problem-solving techniques.\",\n  \"category\": \"Programming\",\n  \"topic\": \"Python\",\n  \"level\": \"Beginner\",\n  \"numberOfChapters\": 5,\n  \"chapters\": [\n    {\n      \"chapterNumber\": 1,\n      \"chapterName\": \"Introduction to Python and Setup\",\n      \"about\": \"What is Python? Why learn it? Setting up your development environment (installing Python, choosing an editor/IDE), and writing your first simple 'Hello, World!' program.\"\n    },\n    {\n      \"chapterNumber\": 2,\n      \"chapterName\": \"Variables, Data Types, and Operators\",\n      \"about\": \"Learn how to store information using variables. Explore fundamental data types like integers, floats, strings, and booleans. Understand basic arithmetic and comparison operators.\"\n    },\n    {\n      \"chapterNumber\": 3,\n      \"chapterName\": \"Basic Data Structures: Lists\",\n      \"about\": \"Introduction to collections of data using Lists. Learn how to create lists, access elements using indexing, add/remove items, and iterate through list elements.\"\n    },\n    {\n      \"chapterNumber\": 4,\n      \"chapterName\": \"Control Flow: Conditional Statements and Loops\",\n      \"about\": \"Learn how to make decisions in your code using 'if', 'elif', and 'else' statements. Understand how to repeat actions using 'for' and 'while' loops.\"\n    },\n    {\n      \"chapterNumber\": 5,\n      \"chapterName\": \"Introduction to Functions\",\n      \"about\": \"Discover how to write reusable blocks of code using functions. Learn how to define your own functions, pass arguments (parameters), and return values to make your code more organized and efficient.\"\n    }\n  ]\n}\n```"},
          ],
        },
        {
          role: "user",
          parts: [
            {text: "Generate a Course Tutorial on Following Details with field as course Name , Description, along with chapter name , about: Category:'Programming', Topic:'Python', Level:'begineer', Duration:2 hours,NoOfChapters\"5 in JSON format"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "The user wants a JSON object representing a Python beginner course tutorial.\nThe JSON object needs the following top-level fields:\n- `courseName`: A suitable name for a beginner Python course.\n- `description`: A brief overview of the course content and target audience.\n- `category`: Provided as 'Programming'.\n- `topic`: Provided as 'Python'.\n- `level`: Provided as 'Beginner'.\n- `duration`: Provided as '2 hours'.\n- `numberOfChapters`: Provided as 5.\n- `chapters`: An array of chapter objects.\n\nEach chapter object within the `chapters` array needs:\n- `chapterNumber`: The sequential number of the chapter (1 to 5).\n- `chapterName`: A relevant name for the chapter's content.\n- `about`: A short description of what the chapter covers.\n\nThe chapter content should logically progress for a beginner Python course and be feasible to cover within a roughly 2-hour total duration (meaning each chapter is relatively short, focusing on core concepts).\n\nPlan:\n1.  Define the main course details (`courseName`, `description`, `category`, `topic`, `level`, `duration`, `numberOfChapters`).\n2.  Create an array for `chapters`.\n3.  For each of the 5 chapters:\n    *   Assign `chapterNumber`.\n    *   Define a concise `chapterName` appropriate for a beginner level and a short duration.\n    *   Write a brief `about` description for each chapter, keeping the 2-hour total duration in mind (focus on essentials).\n    *   Chapter 1: Setup, \"Hello World\", basic concepts.\n    *   Chapter 2: Variables, Data Types (int, float, str, bool), simple input/output.\n    *   Chapter 3: Basic Operators (arithmetic, comparison), Intro to Lists (creation, indexing).\n    *   Chapter 4: Control Flow (if/else statements, simple loops like `for`).\n    *   Chapter 5: Introduction to Functions (defining basic functions, calling them).\n4.  Assemble these parts into the final JSON structure.\n5.  Ensure the JSON is well-formatted and valid."},
            {text: "```json\n{\n  \"courseName\": \"Python Quickstart for Beginners\",\n  \"description\": \"A fast-paced introduction to Python programming fundamentals. This 2-hour course covers the absolute basics, from setting up your environment to writing simple scripts with variables, conditions, and loops. Ideal for those with no prior coding experience looking for a quick overview.\",\n  \"category\": \"Programming\",\n  \"topic\": \"Python\",\n  \"level\": \"Beginner\",\n  \"duration\": \"2 hours\",\n  \"numberOfChapters\": 5,\n  \"chapters\": [\n    {\n      \"chapterNumber\": 1,\n      \"chapterName\": \"Getting Started with Python\",\n      \"about\": \"Introduction to Python, setting up the Python interpreter and a simple code editor. Writing and running your first basic Python script ('Hello, World!'). Understanding basic syntax.\"\n    },\n    {\n      \"chapterNumber\": 2,\n      \"chapterName\": \"Variables and Basic Data Types\",\n      \"about\": \"Learn how to store data using variables. Introduction to core data types: integers, floating-point numbers, strings, and booleans. Simple input and output operations.\"\n    },\n    {\n      \"chapterNumber\": 3,\n      \"chapterName\": \"Operators and Introduction to Lists\",\n      \"about\": \"Explore basic arithmetic (+, -, *, /) and comparison operators (==, !=, <, >). Introduction to lists for storing ordered collections of items and accessing elements.\"\n    },\n    {\n      \"chapterNumber\": 4,\n      \"chapterName\": \"Making Decisions and Repeating Code\",\n      \"about\": \"Learn to control the flow of your program using conditional 'if' and 'else' statements. Introduction to 'for' loops for iterating over sequences like lists.\"\n    },\n    {\n      \"chapterNumber\": 5,\n      \"chapterName\": \"Defining Simple Functions\",\n      \"about\": \"Understand the concept of functions for code reusability. Learn how to define a basic function and call it to execute a block of code.\"\n    }\n  ]\n}\n```"},
          ],
        },
      ],
    });
    export const GenerateChapterContent_AI = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Explain the concept in detail on Topic: Python, Chapter: Introduction to Functions in JSON format with fields: title, description (in detail), and code example (HTML code format if applicable)."},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "Here's a thinking process that leads to the JSON output for explaining Python functions:\n\n1.  **Understand the Goal:** The user wants a detailed explanation of the concept of \"Introduction to Functions\" in Python, presented in JSON format. The JSON object should have three specific fields: `title`, `description` (detailed), and `code example` (formatted as HTML code).\n\n2.  **Identify the Core Concept:** The topic is \"Introduction to Functions\" in Python. What are the essential aspects of this topic for a beginner?\n    *   What *is* a function? (A reusable block of code).\n    *   Why use functions? (Organization, reusability, modularity, readability, avoiding repetition - DRY principle).\n    *   How to define a function (`def` keyword, function name, parentheses `()`, parameters/arguments, colon `:`, indented code block).\n    *   How to call a function (function name followed by parentheses `()`, passing arguments if needed).\n    *   Parameters vs. Arguments (Parameters are variables in the definition; arguments are the values passed during the call).\n    *   Return values (`return` statement, what happens if no `return`, returning `None`).\n    *   Docstrings (Explaining what a function does, using triple quotes `\"\"\"Docstring goes here\"\"\"`).\n    *   Scope (briefly mention local vs. global, though maybe too advanced for a pure *introduction*? Let's keep it brief or focus on local scope within the function).\n\n3.  **Structure the `description`:** This needs to be detailed. I'll break it down based on the core concepts identified above.\n    *   Start with the \"What\" and \"Why\".\n    *   Explain the syntax of defining a function (`def ...:`).\n    *   Explain how to call a function.\n    *   Differentiate parameters and arguments.\n    *   Explain the `return` statement.\n    *   Mention docstrings as good practice.\n    *   Maybe add a concluding sentence summarizing the benefits.\n\n4.  **Draft the `title`:** Keep it simple and clear. \"Introduction to Functions in Python\" seems appropriate.\n\n5.  **Draft the `description` (Iterative Process):**\n    *   *Initial thought:* \"Functions are blocks of code you can reuse.\" (Too simple).\n    *   *Adding detail:* \"Functions in Python are named blocks of reusable code designed to perform a specific task. They help organize code, make it more readable, reduce repetition (following the DRY - Don't Repeat Yourself - principle), and allow for modular program design.\" (Better start).\n    *   *Defining Syntax:* \"You define a function using the `def` keyword, followed by the function name, parentheses `()`, and a colon `:`. The code block that constitutes the function's body must be indented.\" (Needs parameters).\n    *   *Adding Parameters:* \"Inside the parentheses, you can optionally define parameters, which act as input variables for the function. These parameters receive values when the function is called.\"\n    *   *Calling:* \"To execute the code inside a function, you 'call' it by using its name followed by parentheses `()`. If the function expects parameters, you provide values, called arguments, inside these parentheses during the call.\"\n    *   *Parameters vs. Arguments Clarification:* \"It's important to distinguish: Parameters are the variable names listed in the function definition. Arguments are the actual values passed to the function when it is called.\"\n    *   *Return Values:* \"Functions can optionally send a result back to the part of the program that called them using the `return` statement. If a `return` statement is used with a value, that value is returned. If the `return` statement is used without a value, or if the function execution finishes without encountering a `return` statement, the function implicitly returns a special value called `None`.\"\n    *   *Docstrings:* \"Good practice dictates adding a docstring (documentation string) as the first statement inside a function's body, enclosed in triple quotes (`\"\"\"Docstring goes here\"\"\"`). This explains what the function does, its parameters, and what it returns, aiding understanding and documentation.\"\n    *   *Putting it together and refining:* Combine these points logically, ensure smooth transitions, and check for clarity. Make sure the language is accessible for an introduction.\n\n6.  **Design the `code example`:**\n    *   Need a simple, illustrative example.\n    *   Should show defining a function (`def`).\n    *   Should include parameters.\n    *   Should include a `return` statement.\n    *   Should show calling the function with arguments.\n    *   Should demonstrate capturing the return value.\n    *   Should include a docstring.\n    *   A simple `add` or `greet` function is standard. Let's go with `greet` as it's slightly more illustrative of taking input and producing output. Maybe an `add` function too, to show returning a calculated value. Let's combine them: a `greet` function (no return value explicitly, returns `None`) and an `add` function (returns a value).\n    *   *Code Draft:*\n        ```python\n        # 1. Defining a function with a parameter and a docstring\n        def greet(name):\n          \"\"\"Greets the person passed in as a parameter.\"\"\"\n          print(f\"Hello, {name}! Welcome.\")\n\n        # 2. Defining a function with parameters and a return value\n        def add_numbers(num1, num2):\n          \"\"\"Adds two numbers and returns the result.\"\"\"\n          result = num1 + num2\n          return result\n\n        # 3. Calling the functions\n        # Calling the greet function (doesn't return a value to capture)\n        greet(\"Alice\")\n        greet(\"Bob\")\n\n        # Calling the add_numbers function and storing the returned value\n        sum_result = add_numbers(5, 3)\n        print(f\"The sum is: {sum_result}\")\n\n        # You can also print the result directly\n        print(f\"10 + 20 is: {add_numbers(10, 20)}\")\n\n        # Demonstrating the implicit None return from greet\n        returned_value = greet(\"Charlie\")\n        print(f\"The greet function returned: {returned_value}\")\n        ```\n    *   *Format as HTML:* Need to wrap this code in `<pre><code>` tags for proper formatting and escape any HTML special characters within the code (though there aren't any in this specific Python example). Add comments within the code to explain each part.\n\n7.  **Assemble the JSON:** Combine the `title`, `description`, and formatted `code example` into a JSON structure. Ensure proper JSON syntax (curly braces for the object, key-value pairs with keys as strings, string values enclosed in double quotes, commas between pairs). Escape any necessary characters within the strings (e.g., double quotes within the description or code example if needed, though carefully crafting avoids this).\n\n8.  **Review and Refine:** Read through the generated JSON.\n    *   Does the `title` accurately reflect the content? Yes.\n    *   Is the `description` detailed, accurate, and easy to understand for a beginner? Yes, covers the key concepts.\n    *   Does the `code example` clearly illustrate the concepts explained in the description? Yes, shows definition, parameters, calling, return, docstring.\n    *   Is the code correctly formatted as HTML? Yes, using `<pre><code>`.\n    *   Is the overall JSON structure valid? Yes.\n\nThis systematic approach ensures all requirements are met, the content is accurate and detailed, and the final output is in the correct format."},
            {text: "```json\n{\n  \"title\": \"Introduction to Functions in Python\",\n  \"description\": \"Functions are a fundamental concept in Python and programming in general. They represent a named block of reusable code designed to perform a specific, well-defined task. Using functions offers several key advantages:\\n\\n1.  **Modularity:** Functions allow you to break down complex problems into smaller, manageable, and logical chunks of code. Each function handles one specific part of the overall task.\\n2.  **Reusability:** Once defined, a function can be 'called' (executed) multiple times from different parts of your program without rewriting the same code block. This adheres to the DRY (Don't Repeat Yourself) principle.\\n3.  **Organization and Readability:** Well-named functions make code easier to read, understand, and maintain. Instead of a long script, you have a series of function calls that describe the program's flow at a higher level.\\n4.  **Abstraction:** Functions hide the implementation details (the 'how') and only expose the interface (the 'what'). You only need to know what a function does and what inputs it needs, not necessarily how it achieves its result internally.\\n\\n**Defining a Function:**\\n   - You define a function using the `def` keyword, followed by the chosen function name, parentheses `()`, and a colon `:`. \\n   - The function name should follow standard Python identifier rules (letters, numbers, underscores, cannot start with a number) and ideally be descriptive of its purpose (e.g., `calculate_area`, `print_report`).\\n   - Inside the parentheses, you can define zero or more *parameters*. These are variables that will receive values when the function is called.\\n   - The code block that constitutes the function's body must be indented (typically 4 spaces) relative to the `def` line.\\n\\n**Calling a Function:**\\n   - To execute the code within a function, you 'call' it by writing the function's name followed by parentheses `()`.\\n   - If the function definition includes parameters, you must provide corresponding *arguments* (the actual values) inside the parentheses when calling it.\\n\\n**Parameters vs. Arguments:**\\n   - *Parameters* are the variable names listed in the function definition (`def my_function(param1, param2):`).\\n   - *Arguments* are the actual values passed into the function when it is called (`my_function(value1, value2)`).\\n\\n**Return Values:**\\n   - Functions can optionally send a result back to the caller using the `return` statement.\\n   - When a `return` statement with a value is executed, the function immediately stops executing and sends that value back.\\n   - If a function doesn't have an explicit `return` statement, or if `return` is used without a value, it implicitly returns a special value `None`.\\n\\n**Docstrings:**\\n   - It's a best practice to include a documentation string (docstring) as the first statement inside a function's body, enclosed in triple quotes (`\\\"\\\"\\\"Docstring goes here.\\\"\\\"\\\"`). This string explains what the function does, its parameters, and what it returns.\",\n  \"code example\": \"<pre><code class=\\\"language-python\\\"># Example 1: Defining and calling a simple function without parameters or return value\\ndef greet():\\n  \\\"\\\"\\\"This function prints a simple greeting.\\\"\\\"\\\"\\n  print(\\\"Hello, World!\\\")\\n\\n# Calling the function\\ngreet() # Output: Hello, World!\\n\\n# Example 2: Function with parameters\\ndef greet_person(name):\\n  \\\"\\\"\\\"Greets the person whose name is passed as an argument.\\\"\\\"\\\"\\n  print(f\\\"Hello, {name}! How are you?\\\")\\n\\n# Calling the function with an argument\\ngreet_person(\\\"Alice\\\") # Output: Hello, Alice! How are you?\\ngreet_person(\\\"Bob\\\")   # Output: Hello, Bob! How are you?\\n\\n# Example 3: Function with parameters and a return value\\ndef add_numbers(num1, num2):\\n  \\\"\\\"\\\"Adds two numbers and returns their sum.\\\"\\\"\\\"\\n  sum_result = num1 + num2\\n  return sum_result\\n\\n# Calling the function and storing the returned value\\nresult = add_numbers(5, 3)\\nprint(f\\\"The sum is: {result}\\\") # Output: The sum is: 8\\n\\n# You can also use the returned value directly\\nprint(f\\\"10 + 20 = {add_numbers(10, 20)}\\\") # Output: 10 + 20 = 30\\n\\n# Example 4: Function that implicitly returns None\\ndef print_message(message):\\n  \\\"\\\"\\\"Prints a message but doesn't explicitly return anything.\\\"\\\"\\\"\\n  print(message)\\n\\nreturn_value = print_message(\\\"This function returns None.\\\")\\n# Output: This function returns None.\\nprint(f\\\"The return value is: {return_value}\\\") # Output: The return value is: None\\n</code></pre>\"\n}\n```"},
          ],
        },
        {
          role: "user",
          parts: [
            {text: "Explain the concept in Detail on Topic: Python Basic,\nChapter: Variable and Data Types, in JSON Format with list of array\nwith field as title, explanation on give chapter in detail, Code\nExample( Code field in <previous> format) if applicable"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "The user wants a detailed explanation of Python Variables and Data Types, formatted as a JSON object.\nThis JSON object should contain an array (list) where each element is an object.\nEach object in the array should represent a sub-topic within \"Variables and Data Types\" and have the following fields:\n1.  `title`: The name of the sub-topic (e.g., \"Variables\", \"Integers\", \"Strings\", etc.).\n2.  `explanation`: A detailed description of the sub-topic.\n3.  `Code Example`: A Python code snippet demonstrating the sub-topic, formatted within `<pre><code class=\"language-python\">...</code></pre>` tags. If no code example is directly applicable (though unlikely for this topic), it might be omitted or noted.\n\nLet's break down the \"Variables and Data Types\" chapter into key sub-topics:\n\n1.  **What are Variables?**: Definition, purpose, assignment.\n2.  **Variable Naming Rules & Conventions**: Rules (legal identifiers), conventions (PEP 8, snake_case).\n3.  **Dynamic Typing**: Python's nature of determining type at runtime.\n4.  **Basic Data Types**: Introduction to the core built-in types.\n    *   **Numeric Types**:\n        *   `int` (Integers): Whole numbers.\n        *   `float` (Floating-Point Numbers): Numbers with decimals.\n        *   `complex` (Complex Numbers): Numbers with real and imaginary parts (less common for beginners, but good to mention).\n    *   **Sequence Types**:\n        *   `str` (Strings): Ordered sequences of characters.\n        *   `list`: Ordered, mutable sequences.\n        *   `tuple`: Ordered, immutable sequences.\n    *   **Mapping Type**:\n        *   `dict` (Dictionaries): Unordered (in older Python versions) / Insertion-ordered (Python 3.7+) collections of key-value pairs.\n    *   **Set Types**:\n        *   `set`: Unordered collections of unique items.\n        *   `frozenset`: Immutable version of a set.\n    *   **Boolean Type**:\n        *   `bool` (Booleans): Represents truth values (`True` or `False`).\n    *   **None Type**:\n        *   `NoneType`: Represents the absence of a value (`None`).\n5.  **Type Checking**: Using `type()` to find a variable's data type.\n6.  **Type Conversion (Casting)**: Explicitly changing a variable's type (e.g., `int()`, `float()`, `str()`).\n\nNow, I will structure this into the requested JSON format, creating an object for each sub-topic with the specified fields."},
            {text: "```json\n[\n  {\n    \"title\": \"Variables in Python\",\n    \"explanation\": \"A variable in Python is like a container used to store data values. Unlike statically-typed languages, you don't need to declare the type of a variable explicitly before using it. When you assign a value to a variable name, Python automatically determines the data type. Variables are created the moment you first assign a value to them using the assignment operator (`=`). They act as symbolic names or labels pointing to specific locations in the computer's memory where the data is stored. You can change the value (and even the type) stored in a variable by reassigning it.\",\n    \"Code Example\": \"<pre><code class=\\\"language-python\\\"># Variable assignment\\nmessage = \\\"Hello, Python!\\\"  # Assigning a string value\\ncount = 10               # Assigning an integer value\\nprice = 99.95            # Assigning a float value\\nis_active = True         # Assigning a boolean value\\n\\n# Printing the values stored in variables\\nprint(message)\\nprint(count)\\nprint(price)\\nprint(is_active)\\n\\n# Variables can be reassigned\\ncount = count + 5       # Now count holds the value 15\\nprint(count)\\n\\n# A variable can even be reassigned to a different type\\ncount = \\\"Fifteen\\\"       # Now count holds a string\\nprint(count)</code></pre>\"\n  },\n  {\n    \"title\": \"Variable Naming Rules and Conventions\",\n    \"explanation\": \"Choosing good variable names is crucial for writing readable and maintainable code. Python has specific rules and widely accepted conventions (often based on PEP 8 style guide):\\n\\n**Rules (Must be followed):**\\n1.  A variable name must start with a letter (a-z, A-Z) or an underscore (`_`).\\n2.  It cannot start with a number (0-9).\\n3.  It can only contain alpha-numeric characters (a-z, A-Z, 0-9) and underscores (`_`).\\n4.  Variable names are case-sensitive (`age`, `Age`, and `AGE` are three different variables).\\n5.  Variable names cannot be any of the Python reserved keywords (like `if`, `else`, `for`, `while`, `def`, `class`, `import`, `True`, `False`, `None`, etc.).\\n\\n**Conventions (Should be followed for good practice):**\\n1.  Use descriptive names that indicate the variable's purpose (e.g., `user_name` instead of `un`).\\n2.  Use `snake_case` for variable names (all lowercase letters with words separated by underscores, e.g., `first_name`, `item_count`).\\n3.  Avoid using single-letter variable names except for simple loop counters (like `i`, `j`, `k`) or in very specific mathematical contexts, where they are conventional.\",\n    \"Code Example\": \"<pre><code class=\\\"language-python\\\"># Valid variable names\\nmy_variable = 10\\n_internal_counter = 5\\nuser_id_2 = \\\"abc\\\"\\nfirstName = \\\"Alice\\\"  # Valid, but snake_case (first_name) is preferred\\n\\n# Invalid variable names (will cause errors)\\n# 2nd_variable = 20   # Cannot start with a number\\n# user-name = \\\"Bob\\\"   # Cannot contain hyphens\\n# class = \\\"Economy\\\"   # Cannot be a reserved keyword\\n\\n# Case-sensitivity\\nage = 30\\nAge = 40\\nAGE = 50\\nprint(age, Age, AGE) # Output: 30 40 50\\n\\n# Preferred convention (snake_case)\\nitem_price = 19.99\\nnumber_of_students = 25</code></pre>\"\n  },\n  {\n    \"title\": \"Dynamic Typing\",\n    \"explanation\": \"Python is a dynamically-typed language. This means you don't have to explicitly declare the data type of a variable when you create it. Python's interpreter automatically infers the type based on the value assigned to the variable at runtime. Furthermore, you can reassign a variable to a value of a different type later in the program. While this offers flexibility, it also means you need to be mindful of the type of data a variable holds at any given point to avoid runtime errors (e.g., trying to perform arithmetic operations on a string).\",\n    \"Code Example\": \"<pre><code class=\\\"language-python\\\"># Python infers the type at assignment\\nmy_var = 100       # my_var is initially an integer\\nprint(type(my_var)) # Output: &lt;class 'int'&gt;\\n\\nmy_var = \\\"Now I'm a string\\\" # Reassigned to a string\\nprint(type(my_var))       # Output: &lt;class 'str'&gt;\\n\\nmy_var = 3.14      # Reassigned to a float\\nprint(type(my_var)) # Output: &lt;class 'float'&gt;\\n\\n# Potential issue with dynamic typing:\\n# result = my_var + 1 # This would cause a TypeError because you can't add float and int directly to a string in this way\\n# print(result)</code></pre>\"\n  },\n  {\n    \"title\": \"Data Types: Integers (int)\",\n    \"explanation\": \"The `int` data type represents whole numbers (positive, negative, or zero) without any decimal points. Python integers have arbitrary precision, meaning they can grow to accommodate numbers of any size, limited only by the available memory of your system.\",\n    \"Code Example\": \"<pre><code class=\\\"language-python\\\"># Integer examples\\ncount = 25\\nnegative_count = -50\\nyear = 2023\\nvery_large_number = 123456789012345678901234567890\\n\\nprint(type(count))             # Output: &lt;class 'int'&gt;\\nprint(count)\\nprint(negative_count)\\nprint(year)\\nprint(very_large_number)\\n\\n# Arithmetic operations with integers result in int or float\\nsum_val = count + 10         # 25 + 10 = 35 (int)\\ndifference = count - negative_count # 25 - (-50) = 75 (int)\\nproduct = count * 2          # 25 * 2 = 50 (int)\\ndivision_float = count / 5   # 25 / 5 = 5.0 (float - standard division always results in float)\\nfloor_division = count // 5  # 25 // 5 = 5 (int - floor division discards the remainder)\\nremainder = count % 3        # 25 % 3 = 1 (int - modulus operator)\\n\\nprint(sum_val)\\nprint(difference)\\nprint(product)\\nprint(division_float)\\nprint(floor_division)\\nprint(remainder)</code></pre>\"\n  },\n  {\n    \"title\": \"Data Types: Floating-Point Numbers (float)\",\n    \"explanation\": \"The `float` data type represents real numbers, specifically numbers that have a fractional or decimal component. They are used for values that require precision beyond whole numbers, such as measurements, percentages, or scientific calculations. Floats are typically implemented using the IEEE 754 standard for double-precision floating-point numbers. Be aware that due to the way floats are stored in binary, some decimal numbers cannot be represented exactly, which can sometimes lead to small precision errors in calculations.\",\n    \"Code Example\": \"<pre><code class=\\\"language-python\\\"># Float examples\\nprice = 99.95\\ntemperature = -5.5\\npi_approx = 3.14159\\nscientific_notation = 6.022e23 # Represents 6.022 * 10^23\\n\\nprint(type(price))          # Output: &lt;class 'float'&gt;\\nprint(price)\\nprint(temperature)\\nprint(pi_approx)\\nprint(scientific_notation)\\n\\n# Operations involving floats often result in floats\\nnew_price = price * 1.1   # 99.95 * 1.1 = 109.945\\ndivision_result = 10 / 3    # 3.3333333333333335\\n\\nprint(new_price)\\nprint(division_result)\\n\\n# Potential precision issue\\nval1 = 0.1\\nval2 = 0.2\\nprint(val1 + val2)        # Output might be 0.30000000000000004, not exactly 0.3\\n</code></pre>\"\n  },\n  {\n    \"title\": \"Data Types: Strings (str)\",\n    \"explanation\": \"The `str` data type represents sequences of characters. Strings are used to store textual data. They are defined by enclosing characters within single quotes (`'...'`), double quotes (`\\\"...\\\"`), or triple quotes (`'''...'''` or `\\\"\\\"\\\"...\\\"\\\"\\\"`). Triple quotes are often used for multi-line strings or docstrings. Strings are immutable, meaning once a string is created, its contents cannot be changed directly. Operations that appear to modify a string actually create a new string object.\",\n    \"Code Example\": \"<pre><code class=\\\"language-python\\\"># String examples\\nsingle_quoted = 'Hello'\\ndouble_quoted = \\\"World\\\"\\nempty_string = \\\"\\\"\\nmulti_line = '''This is a\\nmulti-line\\nstring.'''\\n\\nprint(type(single_quoted)) # Output: &lt;class 'str'&gt;\\nprint(single_quoted)\\nprint(double_quoted)\\nprint(multi_line)\\n\\n# String concatenation (joining strings)\\nfull_greeting = single_quoted + \\\", \\\" + double_quoted + \\\"!\\\"\\nprint(full_greeting) # Output: Hello, World!\\n\\n# String repetition\\nrepeated_word = single_quoted * 3\\nprint(repeated_word) # Output: HelloHelloHello\\n\\n# Accessing characters (indexing - starts at 0)\\nfirst_char = single_quoted[0]  # 'H'\\nlast_char = single_quoted[-1] # 'o' (negative index counts from the end)\\nprint(first_char, last_char)\\n\\n# Slicing (extracting substrings)\\nsubstring = full_greeting[0:5] # 'Hello' (index 5 is exclusive)\\nprint(substring)\\n\\n# Strings are immutable - this would cause an error:\\n# single_quoted[0] = 'J' # TypeError: 'str' object does not support item assignment\\n\\n# String methods (create new strings)\\nupper_greeting = full_greeting.upper()\\nlower_greeting = full_greeting.lower()\\nprint(upper_greeting) # Output: HELLO, WORLD!\\nprint(lower_greeting) # Output: hello, world!\\n</code></pre>\"\n  },\n  {\n    \"title\": \"Data Types: Booleans (bool)\",\n    \"explanation\": \"The `bool` data type represents one of two truth values: `True` or `False`. Note that these must be capitalized. Booleans are fundamental for controlling program flow using conditional statements (`if`, `elif`, `else`) and loops (`while`). Many expressions in Python evaluate to a boolean value, especially comparison operators (`==`, `!=`, `<`, `>`, `<=`, `>=`) and logical operators (`and`, `or`, `not`). In a numeric context, `True` is treated as `1` and `False` as `0`.\",\n    \"Code Example\": \"<pre><code class=\\\"language-python\\\"># Boolean examples\\nis_logged_in = True\\nhas_permission = False\\n\\nprint(type(is_logged_in)) # Output: &lt;class 'bool'&gt;\\nprint(is_logged_in)\\nprint(has_permission)\\n\\n# Booleans resulting from comparisons\\nis_greater = 10 > 5       # True\\nis_equal = 10 == 10     # True\\nis_not_equal = 10 != 5   # True\\n\\nprint(is_greater)\\nprint(is_equal)\\nprint(is_not_equal)\\n\\n# Logical operators\\ncan_access = is_logged_in and has_permission # True and False -> False\\nalternative_access = is_logged_in or has_permission # True or False -> True\\ninvert_permission = not has_permission         # not False -> True\\n\\nprint(can_access)\\nprint(alternative_access)\\nprint(invert_permission)\\n\\n# Booleans in numeric context\\nprint(True + 1)  # Output: 2 (True is treated as 1)\\nprint(False * 5) # Output: 0 (False is treated as 0)\\n</code></pre>\"\n  },\n  {\n    \"title\": \"Data Types: NoneType (None)\",\n    \"explanation\": \"Python has a special data type called `NoneType`, which has only one possible value: `None`. `None` is used to represent the absence of a value or a null value. It is often used as a default value for function parameters, to indicate that a variable has not yet been assigned a meaningful value, or as the return value of functions that don't explicitly return anything.\",\n    \"Code Example\": \"<pre><code class=\\\"language-python\\\"># None example\\nresult = None\\nprint(result)          # Output: None\\nprint(type(result))    # Output: &lt;class 'NoneType'&gt;\\n\\n# Used as a placeholder or initial value\\nuser_email = None\\n# ... later in the code, it might get assigned a value\\n# if user_provides_email:\\n#    user_email = get_email_from_input()\\n\\n# Functions implicitly return None if no return statement is specified\\ndef my_function():\\n    print(\\\"This function doesn't return anything explicitly.\\\")\\n\\nreturn_value = my_function() # Output: This function doesn't return anything explicitly.\\nprint(return_value)          # Output: None\\n\\n# Checking if a variable is None\\nif result is None:\\n    print(\\\"Result variable has no value assigned yet.\\\")\\n# Output: Result variable has no value assigned yet.\\n\\nif user_email is not None:\\n    print(f\\\"User email is: {user_email}\\\")\\nelse:\\n    print(\\\"User email is not set.\\\")\\n# Output: User email is not set.\\n</code></pre>\"\n  },\n  {\n    \"title\": \"Type Checking with type()\",\n    \"explanation\": \"Since Python is dynamically typed, you sometimes need to check what type of data a variable currently holds. The built-in `type()` function is used for this purpose. It takes an object (like a variable) as an argument and returns its type object.\",\n    \"Code Example\": \"<pre><code class=\\\"language-python\\\"># Using type() to check variable types\\nvar1 = 10\\nvar2 = 3.14\\nvar3 = \\\"Python\\\"\\nvar4 = True\\nvar5 = None\\nvar6 = [1, 2, 3] # This is a list (another data type)\\n\\nprint(f\\\"var1 ({var1}) is of type: {type(var1)}\\\")\\nprint(f\\\"var2 ({var2}) is of type: {type(var2)}\\\")\\nprint(f\\\"var3 ('{var3}') is of type: {type(var3)}\\\")\\nprint(f\\\"var4 ({var4}) is of type: {type(var4)}\\\")\\nprint(f\\\"var5 ({var5}) is of type: {type(var5)}\\\")\\nprint(f\\\"var6 ({var6}) is of type: {type(var6)}\\\")\\n\\n# Output:\\n# var1 (10) is of type: &lt;class 'int'&gt;\\n# var2 (3.14) is of type: &lt;class 'float'&gt;\\n# var3 ('Python') is of type: &lt;class 'str'&gt;\\n# var4 (True) is of type: &lt;class 'bool'&gt;\\n# var5 (None) is of type: &lt;class 'NoneType'&gt;\\n# var6 ([1, 2, 3]) is of type: &lt;class 'list'&gt;\\n</code></pre>\"\n  },\n  {\n    \"title\": \"Type Conversion (Casting)\",\n    \"explanation\": \"Type conversion, or casting, is the process of explicitly changing a variable from one data type to another. Python provides built-in functions like `int()`, `float()`, `str()`, and `bool()` to perform these conversions. This is often necessary when you need to combine values of different types or when input data (which is often read as a string) needs to be used numerically.\\n\\n- `int()`: Attempts to convert a value to an integer. For floats, it truncates the decimal part. For strings, the string must represent a whole number.\\n- `float()`: Attempts to convert a value to a floating-point number. For strings, the string must represent a valid number (integer or float).\\n- `str()`: Converts any value into its string representation.\\n- `bool()`: Converts a value to a boolean. Most values convert to `True`, except for `0`, `0.0`, `None`, empty sequences (like `''`, `[]`, `()`, `{}`), and `False` itself, which convert to `False`.\",\n    \"Code Example\": \"<pre><code class=\\\"language-python\\\"># Type Conversion Examples\\n\\n# int() conversion\\nfloat_num = 123.789\\nint_from_float = int(float_num) # Truncates decimal part\\nprint(f\\\"int({float_num}) = {int_from_float}, type: {type(int_from_float)}\\\") # Output: int(123.789) = 123, type: <class 'int'>\\n\\nstr_num = \\\"456\\\"\\nint_from_str = int(str_num)\\nprint(f\\\"int('{str_num}') = {int_from_str}, type: {type(int_from_str)}\\\") # Output: int('456') = 456, type: <class 'int'>\\n\\n# float() conversion\\nint_val = 789\\nfloat_from_int = float(int_val)\\nprint(f\\\"float({int_val}) = {float_from_int}, type: {type(float_from_int)}\\\") # Output: float(789) = 789.0, type: <class 'float'>\\n\\nstr_float = \\\"98.76\\\"\\nfloat_from_str = float(str_float)\\nprint(f\\\"float('{str_float}') = {float_from_str}, type: {type(float_from_str)}\\\") # Output: float('98.76') = 98.76, type: <class 'float'>\\n\\n# str() conversion\\nnum_val = 100\\nstr_from_num = str(num_val)\\nprint(f\\\"str({num_val}) = '{str_from_num}', type: {type(str_from_num)}\\\") # Output: str(100) = '100', type: <class 'str'>\\n\\nbool_val = True\\nstr_from_bool = str(bool_val)\\nprint(f\\\"str({bool_val}) = '{str_from_bool}', type: {type(str_from_bool)}\\\") # Output: str(True) = 'True', type: <class 'str'>\\n\\n# bool() conversion\\nprint(f\\\"bool(0) = {bool(0)}\\\")         # Output: bool(0) = False\\nprint(f\\\"bool(1) = {bool(1)}\\\")         # Output: bool(1) = True\\nprint(f\\\"bool(-10) = {bool(-10)}\\\")     # Output: bool(-10) = True\\nprint(f\\\"bool('') = {bool('')}\\\")       # Output: bool('') = False\\nprint(f\\\"bool('Hi') = {bool('Hi')}\\\")   # Output: bool('Hi') = True\\nprint(f\\\"bool(None) = {bool(None)}\\\")   # Output: bool(None) = False\\nprint(f\\\"bool([]) = {bool([])}\\\")       # Output: bool([]) = False\\nprint(f\\\"bool([1]) = {bool([1])}\\\")     # Output: bool([1]) = True\\n\\n# Example: Converting user input (which is always string)\\n# age_str = input(\\\"Enter your age: \\\")\\n# age_int = int(age_str) # Convert string input to integer for calculations\\n# print(f\\\"Next year you will be {age_int + 1}\\\")\\n</code></pre>\"\n  }\n]\n```"},
          ],
        },
      ],
    });
  
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // // TODO: Following code needs to be updated for client-side apps.
    // const candidates = result.response.candidates;
    // for(let candidate_index = 0; candidate_index < candidates.length; candidate_index++) {
    //   for(let part_index = 0; part_index < candidates[candidate_index].content.parts.length; part_index++) {
    //     const part = candidates[candidate_index].content.parts[part_index];
    //     if(part.inlineData) {
    //       try {
    //         const filename = `output_${candidate_index}_${part_index}.${mime.extension(part.inlineData.mimeType)}`;
    //         fs.writeFileSync(filename, Buffer.from(part.inlineData.data, 'base64'));
    //         console.log(`Output written to: ${filename}`);
    //       } catch (err) {
    //         console.error(err);
    //       }
    //     }
    //   }
    // }
    // console.log(result.response.text());

  
